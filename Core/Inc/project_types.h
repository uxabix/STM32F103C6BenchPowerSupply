/**
 * @file project_types.h
 * @brief Defines all major data structures and enumerations for the project.
 * @author kiril
 * @date Jul 7, 2025
 */

#ifndef INC_PROJECT_TYPES_H_
#define INC_PROJECT_TYPES_H_

#include <stdbool.h>
#include "stm32f1xx_hal.h"
#include "defines.h"

/** @brief Enumerates the source of an ADC reading. */
typedef enum {
    ADC_INTERNAL, //!< STM32's internal ADC.
    ADC_EXTERNAL  //!< External ADC (e.g., ADS1115).
} ADCSource;

/** @brief Enumerates the measurement mode of an ADC. */
typedef enum {
    ADC_SINGLE_ENDED, //!< Measurement between one pin and GND.
    ADC_DIFFERENTIAL  //!< Measurement between two pins.
} ADCMode;

/** @brief Enumerates the types of output control for a channel. */
typedef enum {
    OUTPUT_NONE, //!< No output.
    OUTPUT_GPIO, //!< Simple digital GPIO output.
    OUTPUT_PWM   //!< PWM-controlled output.
} OutputType;

/** @brief Enumerates the possible events generated by a button press. */
typedef enum {
    BUTTON_IDLE,        //!< No press event detected.
	BUTTON_DEBOUNCE,    //!< Button is currently being debounced.
    BUTTON_SHORT_PRESS, //!< A short press has been detected.
    BUTTON_LONG_PRESS,  //!< A long press has been detected.
	BUTTON_RELEASED,    //!< Button has just been released.
} ButtonEvent;

/** @brief Represents a single GPIO pin. */
typedef struct {
    GPIO_TypeDef* port; //!< Pointer to the GPIO port (e.g., GPIOA).
    uint16_t pin;       //!< The pin number (e.g., GPIO_PIN_0).
} GPIOPin;

/** @brief Describes a generic ADC input source. */
typedef struct {
    ADCSource source; //!< The source of the ADC (internal or external).
    ADCMode mode;     //!< The measurement mode (single-ended or differential).

    union {
        /** @brief Configuration for single-ended mode. */
        struct {
            uint8_t channel; //!< The ADC channel number.
        };
        /** @brief Configuration for differential mode. */
        struct {
            uint8_t pos_channel; //!< The positive ADC channel.
            uint8_t neg_channel; //!< The negative ADC channel.
        };
    };

    uint8_t adc_id;              //!< ID of the ADC (0 for internal, 1+ for external).
    float conversion_factor;     //!< Factor to convert raw value (e.g., for current shunt).
    int16_t value;               //!< The last raw value read from the ADC.
} ADCInput;

/** @brief Represents a temperature sensor. */
typedef struct {
    ADCInput adc;                  //!< The ADC input for this sensor.
    int8_t  warning_threshold;     //!< Temperature in Celsius to trigger a warning.
    int8_t  shutdown_threshold;    //!< Temperature in Celsius to trigger a shutdown.
    bool warning_triggered;        //!< Flag indicating if the warning threshold has been exceeded.
    bool shutdown_triggered;       //!< Flag indicating if the shutdown threshold has been exceeded.
    int8_t  last_value;            //!< The last measured temperature in Celsius.

    float nominal_resistance;      //!< NTC's nominal resistance at nominal temperature (e.g., 10000.0 Ohms).
	float nominal_temperature;     //!< NTC's nominal temperature in Kelvin (e.g., 298.15K for 25В°C).
	float beta;                    //!< NTC's Beta coefficient (e.g., 3435.0).
	float series_resistor;         //!< Resistance of the fixed resistor in the voltage divider (Ohms).
} TemperatureSensor;

/** @brief Represents a current sensor. */
typedef struct {
    ADCInput adc;                //!< The ADC input for this sensor.
    float warning_threshold;     //!< Current in Amperes to trigger a warning.
    float shutdown_threshold;    //!< Current in Amperes to trigger a shutdown.
    bool warning_triggered;      //!< Flag indicating if the warning threshold has been exceeded.
    bool shutdown_triggered;     //!< Flag indicating if the shutdown threshold has been exceeded.
    float last_value;            //!< The last measured current in Amperes.
} CurrentSensor;

/** @brief Represents a voltage sensor. */
typedef struct {
    ADCInput adc;                  //!< The ADC input for this sensor.
    float divider_ratio;           //!< Ratio of the voltage divider (e.g., 11.0 for 100k/10k).
    float last_value;              //!< The last measured voltage in Volts.
    float overvoltage_threshold;   //!< Voltage to trigger an overvoltage shutdown.
    float undervoltage_threshold;  //!< Voltage to trigger an undervoltage warning.
    bool overvoltage_triggered;    //!< Flag indicating if overvoltage was detected.
    bool undervoltage_triggered;   //!< Flag indicating if undervoltage was detected.
} VoltageSensor;

/** @brief Represents a physical button and its state. */
typedef struct {
    GPIOPin pin;                 //!< The GPIO pin connected to the button.
    uint32_t debounce_ms;        //!< Debounce time in milliseconds.
    uint32_t long_press_ms;      //!< Time in ms to hold for a long press event.
    uint32_t last_change_time;   //!< Timestamp of the last state change.
    bool normally_open;          //!< True if the button connects to GND when pressed.
    ButtonEvent state;           //!< The current internal state of the button state machine.
    ButtonEvent event;           //!< The last detected event (short/long press).
} Button;

/** @brief Represents a controllable output (GPIO or PWM). */
typedef struct {
    OutputType type;              //!< The type of output.
    GPIOPin pin;                  //!< The GPIO pin for the output.
    TIM_HandleTypeDef* pwm_timer; //!< Pointer to the timer handle for PWM.
    uint32_t pwm_channel;         //!< The timer channel for PWM (e.g., TIM_CHANNEL_1).
    bool pwm_inversed;            //!< True if the PWM duty cycle is inverted (100% = off).
    uint32_t pwm_last_value;      //!< The last set PWM compare value.
    bool active_high;             //!< For GPIO, true if high level means 'on'.
} OutputControl;

/** @brief Represents a complete power channel with all its components. */
typedef struct {
    uint8_t id;                                     //!< Unique identifier for the channel.
    char name[NAME_LENGTH];                         //!< A short name for the channel.
    TemperatureSensor temp_sensors[MAX_TEMP_SENSORS]; //!< Array of temperature sensors.
    uint8_t temp_sensor_count;                      //!< Number of active temperature sensors.

    CurrentSensor* current_sensor;   //!< Pointer to a current sensor (can be NULL).
    VoltageSensor* voltage_sensor;   //!< Pointer to a voltage sensor (can be NULL).

    OutputControl output;            //!< The output control for this channel.
    Button* button;                  //!< Pointer to the button controlling this channel.

    bool enabled;                    //!< Current on/off state of the channel.
    bool in_warning_state;           //!< True if any sensor is in a warning state.
    bool in_shutdown_state;          //!< True if any sensor has triggered a shutdown.
} PowerChannel;

/** @brief Represents a fan controller. */
typedef struct {
    OutputControl pwm;         //!< The PWM output for the fan.
    int8_t start_temp;         //!< Temperature at which the fan starts spinning.
    int8_t max_temp;           //!< Temperature at which the fan reaches 100% speed.
    float current_speed;       //!< Current fan speed as a ratio (0.0 to 1.0).
} FanController;

#endif /* INC_PROJECT_TYPES_H_ */
